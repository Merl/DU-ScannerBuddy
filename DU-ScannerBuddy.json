{"slots":{"0":{"name":"dbScan","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"button_1","type":{"events":[],"methods":[]}},"3":{"name":"light_1","type":{"events":[],"methods":[]}},"4":{"name":"button_2","type":{"events":[],"methods":[]}},"5":{"name":"light_2","type":{"events":[],"methods":[]}},"6":{"name":"button_3","type":{"events":[],"methods":[]}},"7":{"name":"light_3","type":{"events":[],"methods":[]}},"8":{"name":"switch_1","type":{"events":[],"methods":[]}},"9":{"name":"button","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- changes the state of scanner 1\nchangeState(1)","filter":{"args":[],"signature":"pressed()","slotKey":"2"},"key":"0"},{"code":"-- changes the state of scanner 2\nchangeState(2)","filter":{"args":[],"signature":"pressed()","slotKey":"4"},"key":9},{"code":"-- changes the state of scanner 3\nchangeState(3)","filter":{"args":[],"signature":"pressed()","slotKey":"6"},"key":"1"},{"code":"-- double trigger button\n-- if pressed first time a warning will be printed on screen on top of the content\nmyHTML = [[\n    <div style=\"font-family:ArialMT; font-size:10vh; color:red; width:80vw; margin-right:10vw; margin-left:10vw; border: 1vh red solid; background-color:white; border-radius: 3vw;\">\n    WARNING, Pressing the Switch again within 2 Seconds will reset the timer!\n    </div>\n]]\ncontent[\"warning\"] = screen.addContent(0,((#scanner + 1) * 10), myHTML) \nresettimer = system.getTime()","filter":{"args":[],"signature":"pressed()","slotKey":"8"},"key":"2"},{"code":"-- double trigger button\n-- if pressed a second time within two seconds all scanner staes will be resetted\nif resettimer > 0 and system.getTime() - resettimer < 2 then\n    for i=1, #scanner do\n        if state[i] ~= \"idle\" then\n            light[i].setRGBColor(colors[\"idle\"][\"R\"], colors[\"idle\"][\"G\"], colors[\"idle\"][\"B\"])  \n            state[i] = \"idle\"\n            dbScan.setFloatValue(\"scanner_\" .. i .. \"_status\", 0)\n        end\n    end\nend","filter":{"args":[],"signature":"released()","slotKey":"8"},"key":"3"},{"code":"-- config values\ncountTo = 900 -- export: Time from start to finish\n\ncolorIdleR = 0 -- export: Idle status R\ncolorIdleG = 255 -- export: Idle status G\ncolorIdleB = 0 -- export: Idle status B\ncolorScanningR = 255 -- export: Scanning status R\ncolorScanningG = 127 -- export: Scanning status G\ncolorScanningB = 0 -- export: Scanning status B\ncolorFinishedR = 127 -- export: Finished status R\ncolorFinishedG = 127 -- export: Finished status G\ncolorFinishedB = 0 -- export: Finished status B\n\nrefreshrate = 1 / 24 --export: Refreshrate, defaults to 1/24 seconds\n\n-- if startup should ever take long enough to display a startup message:\ncontainerStart = [[\n<div style=\"font-family:Arial; font-size:10vh; width:100vw; height:100vh;\">\n]]\ncontainerStop = [[</div>\n]]\nlocal html = containerStart .. \"Starting\" .. containerStop\nscreen.setHTML(html)\n\n-- init variables\n-- put colors in table for ease of access\ncolors = {\n    [\"idle\"] = { [\"R\"] = colorIdleR,\n                 [\"G\"] = colorIdleG,\n                 [\"B\"] = colorIdleB\n    },\n    [\"scanning\"] = { [\"R\"] = colorScanningR,\n                     [\"G\"] = colorScanningG,\n                     [\"B\"] = colorScanningB\n    },    \n    [\"finished\"] = { [\"R\"] = colorFinishedR,\n                     [\"G\"] = colorFinishedG,\n                     [\"B\"] = colorFinishedB\n    }\n}\n\n-- put elements in tables to be able to iterate\n-- @TODO: make this autosearch elements\nscanner = {button_1, button_2, button_3}\nlight = {light_1, light_2, light_3}\n\n-- more globals to track the state\nstate = {}\ncontent = {}\ncontent[\"warning\"] = -1\nstarted = {0, 0, 0}\nresettimer = 0\n\n-- animation related variables\n-- time each animation layer runs (currently two layers)\naniTime = {15, 25}\n-- time past since the animation started\ndueTime = {0, 0}\n-- the animation pattern.\n-- basically this is a partial rewrite of the SVG <animate>-tag to imitate its behavior in DU LUA ticks\npattern = {{\n    [\"M0\"] = \"67\",\n    [\"C1\"] = {\"273\", \"183\"},\n    [\"C2\"] = {\"822\", \"-40\"},\n    [\"C3\"] = {\"1920\", \"106\"},\n    [\"V1\"] = \"359\",\n    [\"H\"] = \"0\",\n    [\"V2\"] = \"67\"\n}, {\n    [\"M0\"] = \"77\",\n    [\"C1\"] = {\"473\", \"283\"},\n    [\"C2\"] = {\"822\", \"-40\"},\n    [\"C3\"] = {\"1920\", \"116\"},\n    [\"V1\"] = \"359\",\n    [\"H\"] = \"0\",\n    [\"V2\"] = \"67\"\n}, {\n    [\"M0\"] = \"77\",\n    [\"C1\"] = {\"473\", \"-40\"},\n    [\"C2\"] = {\"1222\", \"283\"},\n    [\"C3\"] = {\"1920\", \"136\"},\n    [\"V1\"] = \"359\",\n    [\"H\"] = \"0\",\n    [\"V2\"] = \"67\"\n}, {\n    [\"M0\"] = \"77\",\n    [\"C1\"] = {\"973\", \"260\"},\n    [\"C2\"] = {\"1722\", \"-53\"},\n    [\"C3\"] = {\"1920\", \"120\"},\n    [\"V1\"] = \"359\",\n    [\"H\"] = \"0\",\n    [\"V2\"] = \"67\"\n}, {\n    [\"M0\"] = \"77\",\n    [\"C1\"] = {\"473\", \"283\"},\n    [\"C2\"] = {\"822\", \"-40\"},\n    [\"C3\"] = {\"1920\", \"116\"},\n    [\"V1\"] = \"359\",\n    [\"H\"] = \"0\",\n    [\"V2\"] = \"67\"\n}}\n\n-- has bp stopped midscan? if yes recover the state\nfor i = 1, #scanner do\n    started[i] = dbScan.getFloatValue(\"scanner_\" .. i .. \"_status\")\n    if started[i] > 0 then\n        state[i] = \"scanning\"\n        light[i].setRGBColor(colors[\"scanning\"][\"R\"], colors[\"scanning\"][\"G\"], colors[\"scanning\"][\"B\"])\n    else\n        state[i] = \"idle\"\n        light[i].setRGBColor(colorIdleR, colorIdleG, colorIdleB)\n    end\nend\n\n-- change the current state, fired in the button events\nfunction changeState(pressedButton)\n    if state[pressedButton] == \"idle\" then\n        started[pressedButton] = system.getTime()\n        dbScan.setFloatValue(\"scanner_\" .. pressedButton .. \"_status\", started[pressedButton])\n        light[pressedButton].setRGBColor(colors[\"scanning\"][\"R\"], colors[\"scanning\"][\"G\"], colors[\"scanning\"][\"B\"])\n        state[pressedButton] = \"scanning\"\n    elseif state[pressedButton] == \"finished\" then\n        dbScan.setFloatValue(\"scanner_\" .. pressedButton .. \"_status\", 0)\n        light[pressedButton].setRGBColor(colorIdleR, colorIdleG, colorIdleB)\n        state[pressedButton] = \"idle\"\n    elseif state[pressedButton] == \"scanning\" then\n        light[pressedButton].setRGBColor(colors[\"finished\"][\"R\"], colors[\"finished\"][\"G\"], colors[\"finished\"][\"B\"])\n        state[pressedButton] = \"finished\"\n    end\nend\n\n-- init the animation start time\n-- @TODO: at the moment the animation is global and the same for all 3 scanners. \n--        if the animation will be triggered by an event this has to be abstracted to \n--        a unique value per scanner.\naniStartTime = {system.getTime(), system.getTime()}\n\n-- how long is the time between each keyframe per animation layer\n-- keyframes are the number of #pattern\ntimeperKeyframe = {aniTime[1] / #pattern, aniTime[2] / #pattern}\n\n-- make our double trigger button always the same state\nswitch_1.deactivate()\n\n-- start the show\nunit.setTimer(\"updateScreen\", refreshrate)\n-- clear the screen for the real content\nscreen.clear()\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"4"},{"code":"-- show an off message\nscreen.setCenteredText(\"Scannermonitor not running\")\n-- deactivate the button the bp is turned on with (doublesided link)\n-- this is part of a setup involing a dedection zone and logical operators to keep the board running\n\n--[[\n\ndz -> manual switch (permanent) -> relais --> manual switch (permanent) <--> bp\n                 ^                      \\\n                 |                       \\--> delay line\n                 |                                  /\n                 ----------------------------------/\n\n]]\nbutton.deactivate()\n\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"5"},{"code":"-- init variable for screen output\nlocal svg = {}\n\n-- build the SVG per scanner\nfor i = 1, #scanner do\n    -- set defaults to variables\n    local hours = 0\n    local minutes = 0\n    local seconds = 0\n    local timedisplay = \"\"\n    local percentScanned = 0\n    local scanStarted = \"--/--/-- --:--:--\"\n    local scanEnding = \"--/--/-- --:--:--\"\n    local timedisplay = \"--\"\n    local scanTimeLeft = \"--\"\n    local extraStyle = \"\"\n    -- if the scanner is running update time display and percent gauge\n    if state[i] == \"scanning\" then\n        local runningTime = system.getTime() - started[i]\n        hours = math.floor(runningTime / 3600) % 60\n        minutes = math.floor(runningTime / 60) % 60\n        seconds = math.floor(runningTime % 60)\n        timedisplay = \"\"\n\n        if hours > 0 then\n            timedisplay = hours .. \"h \"\n        end\n\n        if hours > 0 or minutes > 0 then\n            timedisplay = timedisplay .. minutes .. \"m \"\n        end\n\n        timedisplay = timedisplay .. seconds .. \"s\"\n        \n        -- if scan time is over set state to finished and set according light color\n        if runningTime > countTo then\n            light[i].setRGBColor(colorFinishedR, colorFinishedG, colorFinishedB)\n            state[i] = \"finished\"\n            hours = 0\n            minutes = 0\n            seconds = 0\n            timedisplay = \"\"\n        end\n        scanTimeLeft = math.floor(started[i] + countTo - system.getTime()) .. \"s\"\n        percentScanned = math.floor(100 / countTo * runningTime)\n        scanStarted = getDate(started[i]) .. \" \" .. getTime(started[i])\n        scanEnding = getDate(started[i] + countTo) .. \" \" .. getTime(started[i] + countTo)\n    -- if the scan is finished still display 100%, start and end time\n    elseif state[i] == \"finished\" then\n        percentScanned = 100\n        scanStarted = getDate(started[i]) .. \" \" .. getTime(started[i])\n        scanEnding = getDate(started[i] + countTo) .. \" \" .. getTime(started[i] + countTo)\n    --nothing to do if state is idle, stay at defaults\n    --elseif state[i] == \"idle\" then\n    end\n\n    -- animation related stuff\n    -- time each animation layer is currently running\n    dueTime = {system.getTime() - aniStartTime[1], system.getTime() - aniStartTime[2]}\n    -- if animation layer running time hits the end reset to start (infinite animation loop)\n    -- @TODO: make this a for loop\n    if dueTime[1] > aniTime[1] then\n        aniStartTime[1] = system.getTime()\n        dueTime[1] = system.getTime() - aniStartTime[1]\n    end\n    if dueTime[2] > aniTime[2] then\n        aniStartTime[2] = system.getTime()\n        dueTime[2] = system.getTime() - aniStartTime[2]\n    end\n\n    -- determine which pattern is next (number of keyframes = #pattern)\n    local goalFrame = {}\n    -- if we devide the already running time of the animation by the time we got per frame and round up we know in which keyframe we are currently\n    currentframe = {math.ceil(dueTime[1] / timeperKeyframe[1]), math.ceil(dueTime[2] / timeperKeyframe[2])}\n    -- if the next keyframe would exceed the number of patterns restart at pattern 1\n    -- @TODO: make this a for loop\n    if currentframe[1] >= #pattern then\n        goalFrame[1] = 1\n    else\n        goalFrame[1] = currentframe[1] + 1\n    end\n    if currentframe[2] >= #pattern then\n        goalFrame[2] = 1\n    else\n        goalFrame[2] = currentframe[2] + 1\n    end\n\n    -- print current keyframe number to LUA chat\n    -- print(\"Keyframe for layer 1: \" .. currentframe[1] .. \"Keyframe for layer 2: \" .. currentframe[2])\n\n    -- calculate the values based on the time between keyframes\n--     -- example only for one value:\n--     -- number of keyframes is the numer of items in pattern\n--     keyframes = #pattern\n--     -- time per animation layer (aniTime) divided by the number of keyframes gives us the time we got per keyframe\n--     timeperKeyframe = aniTime / keyframes\n--     -- time each animation layer is currently running (aniStartTime is the system.getTime() of the moment the animation of the layer started)\n--     dueTime = system.getTime() - aniStartTime\n--     -- our currently active keyframe is the time elapsed in the current frame divided by the overall time we got per keyframe\n--     currentframe = math.ceil(dueTime / timeperKeyframe)\n--     -- we start with the value from the current keyframe \n--     M0_start = pattern[currentframe].M0\n--     -- then we get the value of the next frame, if we exceed number of patterns we go back to 1. by doing so we achieve an infinite animation loop\n--     if currentframe >= keyframes then\n--         M0_end = pattern[1].M0\n--         goalFrame = 1\n--     else\n--         M0_end = pattern[currentframe + 1].M0\n--         goalFrame = currentframe + 1\n--     end\n--     -- the difference of the next keyframes value and the current frames value equals a 100% animation step\n--     M0_diff = M0_end - M0_start\n--     -- as we do not make a full step we check where the current frame is between the two keyframes\n--     -- we get the time between the two keyframes if we modulo the elapsed time in the animation by the time we got per keyframe\n--     M0_diffpercent = 100 / timeperKeyframe * (dueTime % timeperKeyframe)\n--     -- now we can calculate the value for the current frame by taking the difference between the two keyframes divided by 100 and multiplying it with the percent\n--     M0_step = M0_diff / 100 * M0_diffpercent\n--     --finaly add our frame step to the keyframes value\n--     M0_goal = M0_start + M0_step\n\n    local target = {{}}\n    -- this is just the above with less variables\n    -- we have two animation layers so we do this two times\n    -- @TODO: Maybe make this loop based on # of a table, allowing for more flexibility and layers?\n    for i = 1, 2 do\n        target[i] = {\n            [\"M0\"] = pattern[currentframe[i]].M0 + ((pattern[goalFrame[i]].M0 - pattern[currentframe[i]].M0) / 100 *\n                (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i]))),\n            [\"C1\"] = {pattern[currentframe[i]].C1[1] +\n                ((pattern[goalFrame[i]].C1[1] - pattern[currentframe[i]].C1[1]) / 100 *\n                    (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i]))),\n                      pattern[currentframe[i]].C1[2] +\n                ((pattern[goalFrame[i]].C1[2] - pattern[currentframe[i]].C1[2]) / 100 *\n                    (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i])))},\n            [\"C2\"] = {pattern[currentframe[i]].C2[1] +\n                ((pattern[goalFrame[i]].C2[1] - pattern[currentframe[i]].C2[1]) / 100 *\n                    (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i]))),\n                      pattern[currentframe[i]].C2[2] +\n                ((pattern[goalFrame[i]].C2[2] - pattern[currentframe[i]].C2[2]) / 100 *\n                    (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i])))},\n            [\"C3\"] = {pattern[currentframe[i]].C3[1] +\n                ((pattern[goalFrame[i]].C3[1] - pattern[currentframe[i]].C3[1]) / 100 *\n                    (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i]))),\n                      pattern[currentframe[i]].C3[2] +\n                ((pattern[goalFrame[i]].C3[2] - pattern[currentframe[i]].C3[2]) / 100 *\n                    (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i])))},\n            [\"V1\"] = pattern[currentframe[i]].V1 + ((pattern[goalFrame[i]].V1 - pattern[currentframe[i]].V1) / 100 *\n                (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i]))),\n            [\"H\"] = pattern[currentframe[i]].H + ((pattern[goalFrame[i]].H - pattern[currentframe[i]].H) / 100 *\n                (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i]))),\n            [\"V2\"] = pattern[currentframe[i]].V2 + ((pattern[goalFrame[i]].V2 - pattern[currentframe[i]].V2) / 100 *\n                (100 / timeperKeyframe[i] * (dueTime[i] % timeperKeyframe[i])))\n        }\n    end\n\n    -- a workaround needed back when I was using a table to position the SVGs. Not really needed anymore but I leave it here just for the case\n    -- extraStyle allows to apply an extra style attribute to the outer SVG that getMainSVG returns\n    if i == 3 then\n        extraStyle = \"margin-left:25vw; margin-right:auto; width:50%\"\n    end\n\n    -- set screen position for the current SVG\n    local x, y = 0\n    if i == 2 then\n        x = 50\n    elseif i == 3 then\n        y = 50\n    end\n\n    -- delete the previous frame and set new frame\n    -- by doing so we can change only parts of the screen and do not have to do a full screenrefresh\n    --screen.deleteContent(content[i])\n    --content[i] = screen.addContent(x, y, getMainSVG(percentScanned, scanStarted, scanEnding, timedisplay, scanTimeLeft, state[i], target, extraStyle))\n    if content[i] and content[i] > 0 then\n        screen.resetContent(content[i],getMainSVG(percentScanned, scanStarted, scanEnding, timedisplay, scanTimeLeft, state[i], target, extraStyle))\n    else\n        content[i] = screen.addContent(x, y, getMainSVG(percentScanned, scanStarted, scanEnding, timedisplay, scanTimeLeft, state[i], target, extraStyle))\n    end\nend\n\n-- if the double trigger reset button has been pushed a warnign will be written to the screen\n-- if the button has not been pushed again within 2 seconds reset the state of the button and remove the warning\nif content[\"warning\"] > 0 then\n    if system.getTime() - resettimer > 2 then\n        screen.deleteContent(content[\"warning\"])\n        content[\"warning\"] = -1\n        resettimer = 0\n        switch_1.deactivate()\n    end\nend","filter":{"args":[{"value":"updateScreen"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"6"},{"code":"-- time and date functions to calculate the current time based on DUs epoch variant\n-- DU time starts at 30.09.2017 00:00:00 \n-- remember DU time is determined by the client and localized. no universal DU time :/\n-- @src: https://scriptinghelpers.org/questions/25121/how-do-you-get-the-date-and-time-from-unix-epoch-time#28674\ngetDate = function(duepoch)\n    -- Given DU date, return string date\n    local tabIndexOverflow = function(seed, table)\n        for i = 1, #table do\n            if seed - table[i] <= 0 then\n                return i, seed\n            end\n            seed = seed - table[i]\n        end\n    end\n    local duepoch =  duepoch or system.getTime()\n\n    local dayCount = function(yr) return (yr % 4 == 0 and (yr % 100 ~= 0 or yr % 400 == 0)) and 366 or 365 end\n    -- for unix time this is 1970/01/01 00:00:00\n    -- in DU it is 2017/09/30 00:00:00\n    local year, days, month = 2017, math.ceil(duepoch/86400) + 272\n    while days >= dayCount(year) do days = days - dayCount(year) year = year + 1 end -- Calculate year and days into that year\n\n    month, days = tabIndexOverflow(days, {31,(dayCount(year) == 366 and 29 or 28),31,30,31,30,31,31,30,31,30,31}) \n\n    return string.format(\"%d/%d/%d\", month, days, year)\nend\n\ngetTime = function(seconds)\n    local seconds = seconds or system.getTime()\n    local hours = math.floor(seconds / 3600 % 24)\n    hours = hours > 12 and hours - 12 or hours == 0 and 12 or hours\n    return string.format(\"%d:%d:%d %s\", hours, math.floor(seconds / 60 % 60), math.floor(seconds % 60), hours > 12 and \"pm\" or \"am\")\nend\n\n-- function to get the SVG, does nothing but returning the SVG with passed variables\nfunction getMainSVG(percentScanned, started, ending, running, timeleft, scannerState, target, extraStyle)\n    return [[\n<svg class=\"scanner-progress\" style=\"background-color:none; font-family: monospace; ]].. extraStyle ..[[\"\n                width=\"50%\" height=\"50%\" viewBox=\"0 0 1920 1080\" preserveAspectRatio=\"xMaxYMin meet\">\n                <rect x=\"20\" y=\"20\" rx=\"20\" ry=\"20\" width=\"1870\" height=\"1100\"\n                    style=\"fill:none;stroke:#0E2835;stroke-width:20;opacity:1\" />\n                <!--circle class=\"s1_progress\" style=\"transform-origin: 392px 365px; stroke-dasharray: 1633.6282px 1633.6282px; stroke-dashoffset:555.4336;\" stroke=\"#46C2FF\" stroke-width=\"60\" stroke-opacity=\"1\" fill=\"transparent\"\n                    r=\"260\" cx=\"390\" cy=\"360\" /-->\n                <svg viewBox=\"0 0 36 36\" x=100 y=-180 width=\"580\">\n                  <path\n                    d=\"M18 2.0845\n                      a 15.9155 15.9155 0 0 1 0 31.831\n                      a 15.9155 15.9155 0 0 1 0 -31.831\"\n                    fill=\"none\"\n                    stroke=\"#46C2FF\";\n                    stroke-width=\"3.2\";\n                    stroke-dasharray=\"]] .. percentScanned .. [[, 100\"\n                  />\n                </svg>\n                \n                \n                <circle class=\"s1_progress\" stroke=\"#0E2835\" stroke-width=\"10\" stroke-opacity=\"1\" fill=\"transparent\"\n                    r=\"285\" cx=\"390\" cy=\"360\" />\n                <circle class=\"s1_progress\" stroke=\"#0E2835\" stroke-width=\"10\" stroke-opacity=\"1\" fill=\"transparent\"\n                    r=\"235\" cx=\"390\" cy=\"360\" />\n\n\n\n                <text x=\"400\" y=\"395\" text-anchor=\"middle\"\n                    style=\"font-size:8vw; font-size: 100; font-weight: bold; fill: orange; stroke: #dfac20; stroke-width: 1;\">]] ..\n               percentScanned .. [[%</text>\n                <rect x=\"760\" y=\"40\" rx=\"10\" ry=\"10\" width=\"1110\" height=\"470\"\n                    style=\"fill:none;stroke:#0E2835;stroke-width:10;opacity:1;\">\n\n                </rect>\n\n                <text x=\"770\" y=\"110\" text-anchor=\"left\"\n                    style=\"font-size: 60; font-weight: bold; fill: #46C2FF; stroke: #46C2FF; stroke-width: 1;\">Detail</text>\n\n                <text x=\"770\" y=\"180\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">Start:\n                </text>\n                <text x=\"1100\" y=\"180\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">]] ..\n               started .. [[</text>\n\n                <text x=\"770\" y=\"230\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">End:\n                </text>\n                <text x=\"1100\" y=\"230\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">]] ..\n               ending .. [[</text>\n\n                <text x=\"770\" y=\"280\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">Running:\n                </text>\n                <text x=\"1100\" y=\"280\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">]] ..\n               running .. [[</text>\n\n                <text x=\"770\" y=\"330\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">Time\n                    left: </text>\n                <text x=\"1100\" y=\"330\" text-anchor=\"left\"\n                    style=\"font-size: 45; font-weight: bold; fill: #ffffff; stroke: #ffffff; stroke-width: 1;\">]] ..\n               timeleft .. [[</text>\n\n                <rect x=\"760\" y=\"530\" rx=\"10\" ry=\"10\" width=\"1110\" height=\"490\"\n                    style=\"fill:none;stroke:#0E2835;stroke-width:10;opacity:1;\" />\n                <text x=\"770\" y=\"590\" text-anchor=\"left\"\n                    style=\"font-size:8vw; font-size: 60; font-weight: bold; fill: #46C2FF; stroke: #46C2FF; stroke-width: 1;\">Vis</text>\n                <svg x=765 y=660 width=1100>\n                    <defs>\n                        <linearGradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"-10.959%\" y2=\"100%\">\n                            <stop stop-color=\"#57BBC1\" stop-opacity=\".75\" offset=\"0%\" />\n                            <stop stop-color=\"#015871\" offset=\"100%\" />\n                        </linearGradient>\n                        <linearGradient id=\"b\" x1=\"50%\" x2=\"50%\" y1=\"-10.959%\" y2=\"100%\">\n                            <stop stop-color=\"#11FFC1\" stop-opacity=\".25\" offset=\"0%\" />\n                            <stop stop-color=\"#7aFF71\" offset=\"100%\" />\n                        </linearGradient>\n                    </defs>\n                    <path fill=\"url(#a)\" fill-rule=\"evenodd\" d=\"\n                    M0 ]] .. target[1].M0 .. [[\n                    C  ]] .. target[1].C1[1] .. [[,]] .. target[1].C1[2] .. [[\n                       ]] .. target[1].C2[1] .. [[,]] .. target[1].C2[2] .. [[\n                       ]] .. target[1].C3[1] .. [[,]] .. target[1].C3[2] .. [[\n     \n                    V  ]] .. target[1].V1 .. [[ \n                    H  ]] .. target[1].H .. [[ \n                    V  ]] .. target[1].V2 .. [[\n                    Z\" transform=\"matrix(-1 0 0 1 1600 0)\">\n           \n                    </path>\n                    <path fill=\"url(#b)\" fill-rule=\"evenodd\" d=\"\n                            M0 ]] .. target[2].M0 .. [[\n                            C  ]] .. target[2].C1[1] .. [[,]] .. target[2].C1[2] .. [[\n                            ]] .. target[2].C2[1] .. [[,]] .. target[2].C2[2] .. [[\n                            ]] .. target[2].C3[1] .. [[,]] .. target[2].C3[2] .. [[\n            \n                            V  ]] .. target[2].V1 .. [[ \n                            H  ]] .. target[2].H .. [[ \n                            V  ]] .. target[2].V2 .. [[\n                            Z\" transform=\"matrix(-1 0 0 1 1600 0)\">\n                        \n                    </path>\n                </svg>\n                <rect x=\"40\" y=\"700\" rx=\"10\" ry=\"10\" width=\"700\" height=\"320\"\n                    style=\"fill:none;stroke:#0E2835;stroke-width:10;opacity:1;\" />\n                <text x=\"50\" y=\"760\" text-anchor=\"left\"\n                    style=\"font-size:8vw; font-size: 60; font-weight: bold; fill: #46C2FF; stroke: #46C2FF; stroke-width: 1;\">Scanner\n                    status</text>\n                <text x=\"50\" y=\"970\" text-anchor=\"left\"\n                    style=\"font-size:8vw; font-size: 140; font-weight: bold; fill: orange; stroke: orange; stroke-width: 1;\">]].. scannerState ..[[</text>\n            </svg>\n]]\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"7"}],"methods":[],"events":[]}